"""
This type stub file was generated by pyright.
"""

import multiprocessing
from contextlib import contextmanager
from typing import Any

class ChannelError(OSError):
    """Error occurring within the process channel."""
    ...


def channels(mp_context: multiprocessing.context.BaseContext) -> tuple:
    ...

class Channel:
    def __init__(self, reader: multiprocessing.connection.Connection, writer: multiprocessing.connection.Connection) -> None:
        ...
    
    def recv(self) -> Any:
        ...
    
    def send(self, obj: Any):
        ...
    
    def close(self): # -> None:
        ...
    


class WorkerChannel(Channel):
    def __init__(self, reader: multiprocessing.connection.Connection, writer: multiprocessing.connection.Connection, unused: tuple, mp_context: multiprocessing.context.BaseContext) -> None:
        ...
    
    def __getstate__(self) -> tuple:
        ...
    
    def __setstate__(self, state: tuple): # -> None:
        ...
    
    @property
    @contextmanager
    def lock(self): # -> Generator[Self, Any, None]:
        ...
    
    def initialize(self): # -> None:
        """Close unused connections."""
        ...
    


class ChannelMutex:
    def __init__(self, mp_context: multiprocessing.context.BaseContext) -> None:
        ...
    
    def __getstate__(self): # -> tuple[Any, Any]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, *_): # -> None:
        ...
    
    @property
    @contextmanager
    def reader(self): # -> Generator[Self, Any, None]:
        ...
    
    @property
    @contextmanager
    def writer(self): # -> Generator[Self, Any, None]:
        ...
    


MILLISECONDS = ...
LOCK_TIMEOUT = ...
