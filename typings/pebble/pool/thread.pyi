"""
This type stub file was generated by pyright.
"""

from typing import Callable
from concurrent.futures import Future
from pebble.pool.base_pool import BasePool, MapFuture, PoolContext, Task

class ThreadPool(BasePool):
    """Allows to schedule jobs within a Pool of Threads.

    max_workers is an integer representing the amount of desired process workers
    managed by the pool.
    If max_tasks is a number greater than zero,
    each worker will be restarted after performing an equal amount of tasks.

    initializer must be callable, if passed, it will be called
    every time a worker is started, receiving initargs as arguments.

    """
    def __init__(self, max_workers: int = ..., max_tasks: int = ..., initializer: Callable = ..., initargs: list = ...) -> None:
        ...
    
    def schedule(self, function, args=..., kwargs=...) -> Future:
        """Schedules *function* to be run the Pool.

        *args* and *kwargs* will be forwareded to the scheduled function
        respectively as arguments and keyword arguments.

        A *concurrent.futures.Future* object is returned.

        """
        ...
    
    def submit(self, function: Callable, *args, **kwargs) -> Future:
        """This function is provided for compatibility with
        `asyncio.loop.run_in_executor`.

        For scheduling jobs within the pool use `schedule` instead.

        """
        ...
    
    def map(self, function: Callable, *iterables, **kwargs) -> MapFuture:
        """Returns an iterator equivalent to map(function, iterables).

        *chunksize* controls the size of the chunks the iterable will
        be broken into before being passed to the function. If None
        the size will be controlled by the Pool.

        """
        ...
    


def pool_manager_loop(pool_manager: PoolManager): # -> None:
    ...

class PoolManager:
    def __init__(self, context: PoolContext) -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    
    def update_status(self): # -> None:
        ...
    
    def inspect_workers(self) -> tuple:
        ...
    
    def create_workers(self): # -> None:
        ...
    
    def join_worker(self, worker): # -> None:
        ...
    


def worker_thread(context: PoolContext): # -> None:
    """The worker thread routines."""
    ...

def get_next_task(context: PoolContext, max_tasks: int): # -> Generator[Any, Any, None]:
    ...

def execute_next_task(task: Task): # -> None:
    ...

def process_chunk(function: Callable, chunk: list) -> list:
    """Processes a chunk of the iterable passed to map dealing with errors."""
    ...

