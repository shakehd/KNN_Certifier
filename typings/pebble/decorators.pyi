"""
This type stub file was generated by pyright.
"""

import threading
from typing import Callable

_synchronized_lock = ...
def synchronized(*args) -> Callable:
    """A synchronized function prevents two or more callers to interleave
    its execution preventing race conditions.

    The synchronized decorator accepts as optional parameter a Lock, RLock or
    Semaphore object which will be employed to ensure the function's atomicity.

    If no synchronization object is given, a single threading.Lock will be used.
    This implies that between different decorated function only one at a time
    will be executed.

    """
    ...

def decorate_synchronized(function: Callable, lock: threading.Lock) -> Callable:
    ...

def sighandler(signals: list) -> Callable:
    """Sets the decorated function as signal handler of given *signals*.

    *signals* can be either a single signal or a list/tuple
    of multiple ones.

    """
    ...

def set_signal_handlers(signals: list, function: Callable): # -> None:
    ...

